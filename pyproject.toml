[tool.poetry]
name = "netmikro"
version = "0.1.0"
description = "Netmikro is a simple library that provides an easy way to manage Mikrotik routers, simplifying configuration and monitoring tasks."
authors = ["Henrique Sebasti√£o <contato@henriquesebastiao.com>"]
readme = "README.md"
packages = [{include = "netmikro"}]
classifiers = [
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "Intended Audience :: Telecommunications Industry",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Topic :: System :: Networking :: Firewalls",
    "Topic :: System :: Networking",
    "Topic :: System :: Networking :: Monitoring :: Hardware Watchdog",
    "Topic :: Utilities",
]

[tool.poetry.urls]
"Documentation" = "https://netmikro.henriquesebastiao.com"
"Homepage" = "https://netmikro.henriquesebastiao.com"
"Repository" = "https://github.com/henriquesebastiao/netmikro"
"Bug Tracker" = "https://github.com/henriquesebastiao/netmikro/issues"

[tool.poetry.dependencies]
python = "^3.11"
netmiko = "^4.2.0"
python-dotenv = "^1.0.1"

[tool.poetry.group.dev.dependencies]
pytest-cov = ">=4.1,<6.0"
blue = "^0.9.1"
isort = "^5.12.0"
ruff = ">=0.5.1,<0.6.2"
taskipy = "^1.12.0"
coverage-badge = "^1.1.1"
setuptools = ">=69.5.1,<74.0.0"
pytest = "^8.2.0"
bandit = {extras = ["toml"], version = "^1.7.8"}
radon = {extras = ["toml"], version = "^6.0.1"}
mypy = "^1.10.0"
pydocstyle = "^6.3.0"

[tool.poetry.group.doc.dependencies]
mkdocs-material = "^9.2.8"
mkdocstrings = ">=0.23,<0.26"
mkdocstrings-python = "^1.6.2"
mkdocs-macros-plugin = "^1.0.5"
jinja2 = "^3.1.3"
pygments = "^2.17.2"
pymdown-extensions = "^10.7"
mkdocs-git-committers-plugin-2 = "^2.2.3"
mkdocs-git-authors-plugin = ">=0.7.2,<0.10.0"
mkdocs-git-revision-date-localized-plugin = "^1.2.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
ignore_missing_imports = true
check_untyped_defs = true

[tool.pytest.ini_options]
pythonpath = "."
python_files = "test.py tests.py test_*.py tests_*.py *_test.py *_tests.py"

[tool.coverage.run]
source = [
    "netmikro",
]
omit = [
    "/tests/*",
]

[tool.isort]
profile = "black"
line_length = 79

[tool.ruff]
line-length = 79
indent-width = 4

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F403", "F401"]
"tests/*" = ["F401", "F811"]

[tool.taskipy.tasks]
ruff = "ruff check ."
blue = "blue --check . --diff"
isort = "isort --check --diff ."
mypy = "mypy -p netmikro"
radon = "radon cc ./netmikro -a -na"
bandit = "bandit -r ./netmikro"
pydocstyle = "pydocstyle ./netmikro --count --convention=google --add-ignore=D100,D104,D105,D107"
lint = "task ruff && task blue && task isort"
format = 'blue .  && isort .'
docs = "mkdocs serve"
quality = "task mypy && task radon && task pydocstyle"
badge = "coverage-badge -o docs/assets/coverage.svg -f"
pre_test = "task lint"
test = "pytest -s -x --cov=netmikro -vv"
post_test = "coverage html"
export-requirements = "rm requirements.txt && poetry export -f requirements.txt --output requirements.txt --without-hashes"
export-requirements-doc = "poetry export -f requirements.txt --output docs/requirements.txt --without-hashes --only doc"
ready = "task lint && task quality && task bandit && pytest -s -x --cov=netmikro -vv && coverage html && task export-requirements && task export-requirements-doc && task badge"
